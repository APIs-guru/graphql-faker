"use strict";
const tslib_1 = require("tslib");
const command_1 = require("@oclif/command");
const fs_1 = tslib_1.__importDefault(require("fs"));
const graphql_1 = require("graphql");
class GraphqlJsonToSdl extends command_1.Command {
    async run() {
        const { args } = this.parse(GraphqlJsonToSdl);
        const { src, out } = args;
        try {
            writeSchema(src, out);
        }
        catch (error) {
            if (error instanceof EmptySchemaError) {
                this.error(`Schema file ${src} is empty. Please provide a valid JSON schema.`, { exit: 1 });
            }
            this.error(error, { exit: 1 });
        }
    }
}
GraphqlJsonToSdl.description = "Converts a JSON GraphQL schema to GraphQL SDL.";
GraphqlJsonToSdl.examples = ["$ graphql-json-to-sdl ./schema.json ./schema.graphql"];
GraphqlJsonToSdl.args = [
    {
        name: "src",
        required: true,
        description: "The JSON GraphQL schema to convert."
    },
    { name: "out", required: true, description: "The output file." }
];
GraphqlJsonToSdl.flags = {
    version: command_1.flags.version({ char: "v" }),
    help: command_1.flags.help({ char: "h" })
};
class EmptySchemaError extends Error {
}
function writeSchema(src, out) {
    const fileContent = fs_1.default.readFileSync(src, "utf-8");
    if (!fileContent) {
        throw new EmptySchemaError();
    }
    const { data } = JSON.parse(fileContent);
    data.__schema.types.sort((a, b) => {
        return a.name.localeCompare(b.name);
    });
    data.__schema.types.forEach((type) => {
        if (!type.fields)
            return;
        type.fields.sort((a, b) => {
            return a.name.localeCompare(b.name);
        });
    });
    const clientSchema = graphql_1.buildClientSchema(data);
    const graphqlSchemaString = graphql_1.printSchema(clientSchema);
    fs_1.default.writeFileSync(out, graphqlSchemaString);
}
module.exports = GraphqlJsonToSdl;
